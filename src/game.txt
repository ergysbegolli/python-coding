import simplegui
import math
import random

width = 800
height = 600
score = 0
lives = 3
started = False
time = 0
t = 0
xtime = 0

class Imginfo:
    def __init__ (self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float ('inf')
        self.animated = animated
        
    def get_center(self):
        return self.center
    def get_size (self):
        return self.size
    def get_radius (self):
        return self.radius
    def get_lifespan(self):
        return self.lifespan
    def get_animated (self):
        return self.animated

debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")
debris_info = Imginfo ([320,240],[640,480])

nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")
nebula_info = Imginfo ([400,300],[800,600])

splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")
splash_info = Imginfo ([200,150],[400,300])

ship_image = simplegui.load_image ("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")
ship_info = Imginfo ([45,45],[90,90],35)

missile_image = simplegui.load_image ("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")
missile_info = Imginfo ([5,5],[10,10],3,60)

asteroid_image = simplegui.load_image ("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")
asteroid_info = Imginfo ([45,45],[90,90],40)

explosion_image = simplegui.load_image ("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")
explosion_info = Imginfo ([64,64],[128,128],17,24,True)

soundtrack = simplegui.load_sound ("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume (.5)
thrust_sound = simplegui.load_sound ("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound ("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

def distance (c2,c1):
    return math.sqrt((c2[0]-c1[0])**2+(c2[1]-c1[1])**2)

class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.image_radius = info.get_radius()
        
    def draw (self, canvas):
        if self.thrust:
            canvas.draw_image (self.image, [self.image_center[0]+90,self.image_center[1]],self.image_size, self.pos, self.image_size,self.angle)
        else:
            canvas.draw_image (self.image, self.image_center,self.image_size, self.pos, self.image_size,self.angle)
    
    def update (self):
        
        self.angle += self.angle_vel
        self.pos[0] = (self.pos[0] + self.vel[0])%width
        self.pos[1] = (self.pos[1] +self.vel[1])%height 
        
        if self.thrust:
            self.vel[0]+=math.cos(self.angle)*.1
            self.vel[1]+=math.sin(self.angle)*.1
        
        self.vel[0] *= 0.99
        self.vel[1] *= 0.99
        
class Sprite:
    def __init__(self, pos, vel, angle, angle_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = angle_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.image_radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
                        
    def draw (self, canvas):
        if not self.animated:
            canvas.draw_image(self.image,self.image_center, self.image_size, self.pos, self.image_size,self.angle)
        else:
            index = (xtime % self.image_center[0])//1
            center = [self.image_center[0]+index*self.image_size[0], self.image_center[1]]
            canvas.draw_image(self.image,center, self.image_size, self.pos, self.image_size)
            
    def update (self):
        self.pos[0]= (self.pos[0] + self.vel[0])%width
        self.pos[1]= (self.pos[1] + self.vel[1])%height
        self.angle += self.angle_vel
        self.lifespan -=1
        
    def collide (self, other):
        return distance (self.pos, other.pos)< self.image_radius+ other.image_radius
    
def down (key):
    global shipi,started, missis
    if key == simplegui.KEY_MAP["up"]and started:
        shipi.thrust = True
        thrust_sound.play()
    elif key == simplegui.KEY_MAP["left"]and started:
        shipi.angle_vel -= .1
    elif key == simplegui.KEY_MAP["right"]and started:
        shipi.angle_vel += .1
    elif key == simplegui.KEY_MAP ["space"]and started:
        missis.add (Sprite ([shipi.pos[0]+shipi.image_radius*math.cos(shipi.angle),shipi.pos[1]+shipi.image_radius*math.sin(shipi.angle)],[shipi.vel[0]+5*math.cos(shipi.angle),shipi.vel[1]+5*math.sin(shipi.angle)],0,0,missile_image,missile_info,missile_sound))
        
def up (key):
    global shipi
    if key == simplegui.KEY_MAP["up"]:
        shipi.thrust = False
        thrust_sound.pause()
        thrust_sound.rewind()
    elif key == simplegui.KEY_MAP["left"]:
        shipi.angle_vel = 0
    if key == simplegui.KEY_MAP["right"]:
        shipi.angle_vel = 0
        
def click (pos):
    global started, lives, score
    if pos[0]>200 and pos[0]<600 and pos[1]> 150 and pos[1] < 450:
        
        if not started:
            lives = 3
            score = 0
            soundtrack.play ()
            timer.start()
        started = True
                       
def rock_spawn ():
    global t, shipi
    t +=1
    if t == 12:
        timer.stop()
    rockpos = [random.randrange(0,width),random.randrange(0,height)]
    if (rockpos [0] > shipi.pos[0] - 75) and (rockpos[0] < shipi.pos[0] + 75) and (rockpos[1]<shipi.pos[1] + 75) and (rockpos[1]>shipi.pos[1]-75):
        rockpos [0] += 50
        rockpos [1] += 50
    rocks.add(Sprite (rockpos,[random.random()+.1,random.random()+.1],0,random.random()/15+.01,asteroid_image,asteroid_info))

def group_collide (group, one):
    global exp, xtime
    tceku = False
    for sprite in list(group):
        if sprite.collide (one):
            group.remove(sprite)
            exp.add(Sprite(sprite.pos,[0,0],0,0,explosion_image, explosion_info,explosion_sound))
            xtime = 0
            tceku = True
    return tceku 

def group_group_collide (gr1, gr2):
    tceku = False
    for sprite in list(gr2):
        if group_collide (gr1, sprite):
            gr2.remove(sprite)
            tceku = True
    return tceku

def draw(canvas):
    global xtime,time,lives, t, started, score,rocks,missis,shipi
    time +=1
    xtime += 1
    wtime = (time/4)%width
    
    canvas.draw_image (nebula_image, nebula_info.get_center(), nebula_info.get_size(), [width/2,height/2],nebula_info.get_size())
    canvas.draw_image (debris_image, debris_info.get_center(), debris_info.get_size(), [wtime + width/2,height/2], [width,height])
    canvas.draw_image (debris_image, debris_info.get_center(), debris_info.get_size(), [wtime - width/2,height/2], [width,height])
    if not started:
        canvas.draw_image (splash_image, splash_info.get_center(),splash_info.get_size(),[width/2,height/2], splash_info.get_size() )
    canvas.draw_text ("Lives: "+ str(lives), [30,50],25,"white")
    canvas.draw_text ("Score: "+ str(score), [670,50],25,"white")
    
    shipi.draw(canvas)
    shipi.update()
    for rck in rocks:
        rck.draw(canvas)
        rck.update()
    for mss in list(missis):
        mss.draw(canvas)
        mss.update()
        if mss.lifespan == 0:
            missis.remove(mss)
    for xp in list(exp):
        xp.draw(canvas)
        xp.update()
        if xp.lifespan == 0:
            exp.remove(xp)
    if group_collide(rocks,shipi):
        lives -= 1
        score += 10
        t-= 1 
        timer.start()
        if lives == 0:
            started = False
            rocks = set([])
            missis = set([])
            t = 0
            timer.stop()
            soundtrack.rewind()
    if group_group_collide(rocks,missis):
        score +=10
        t-= 1
        timer.start()
    
shipi = Ship ([width/2,height/2],[0,0],0,ship_image, ship_info)
a_rock = Sprite ([random.randrange(0,width),random.randrange(0,height)],[random.random()+.1,random.random()+.1],0,random.random()/15+.01,asteroid_image,asteroid_info)
rocks = set([])
missis = set ([])
exp = set ([])

f = simplegui.create_frame("ricerocks",width,height)
f.set_draw_handler(draw)
timer = simplegui.create_timer (1000.0, rock_spawn)
f.set_keydown_handler (down)
f.set_keyup_handler (up)
f.set_mouseclick_handler (click)
f.start()
                                                                                                                             